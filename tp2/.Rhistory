sample(piece, 1)
c("pile", "face") -> piece
sample(piece, 1)
sample(pi`ece, 20, replace = TRUE)
sample(piece, 20, replace = TRUE)
sample(piece, 10, replace = TRUE)
help(dunif)
#3
#help(dunif)
#help(runif)
dunif(5, 0,10)
#
dunif(5, 0,4)
#
dunif(5, 0,20)
#
runif(10, -2,3)
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(10000,-2,3)
x
plots(x)
gunif(x)
hist(x)
x=runif(100,-2,3)
y=runif(100,-2,3)
hist(y)
hist(x)
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(10000,-2,3, frequency(FALSE))
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(10000,-2,3, freq(FALSE))
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(10000,-2,3, freq=FALSE)
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(10000,-2,3,freq=FALSE)
hist(x, freq = FALSE)
hist(y, freq = FALSE)
hist(y, freq = NULL)
hist(x, freq = NULL)
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(100000,-2,3)
hist(x)
#2 tirage aleatoire
c("pile", "face") -> piece
sample(piece, 10, replace = TRUE)
sample(piece, 10 )
sample(piece, 10, replace = TRUE)
x=runif(10000,-2,3)
hist(x,freq=FALSE)
abline(h=0.2,col="green")
hist(x,freq=FALSE)
hist(x,freq=FALSE)
x=runif(10,1,6)
hist(x,freq=FALSE)
x=runif(1000000,1,6)
hist(x,freq=FALSE)
x=runif(1000000,1,6)
hist(x,freq=FALSE)
abline(h=0.2,col="green")
y=rnorm(10000,-1,2)
hist(y,freq=FALSE)
curve(exp((-(x+1)^2)/8)(2*sqrt(2*pi)),-10,8,add=TRUE,col="red")
l=(158 161 161 175 172 158 193 179 175 165 163 161 158
175 161 185 173 161 176 157 175 183
174 162 158 161 157 166 163 167 171 169 174 160 158 161
163 159 161 164 157 175 190 161
173 176 170 175 162 184 163 172 170 171 164 173 164
152 168 179 180 170 169 158 155 173
167 157 159 165 162 174 163 163 179 167 157 175
175 153 169 170 164 163 165 185 158 156
172 175 162 166 166 155 165 157 167 161 164 170
177 184 168 188 172 160 170 161 173 179
171 159 169 158 163 164 162 168 168 175 165 158
174 168 164 182 161 166 165 151 167 172
171 179 179 173 165 187 173 163 162 172 183 164
172 158 187 168 159 174 159 159 167 181
173 175 161 178 180 160 182 158 170 161 184 157
166 167 189 161 189 169 179 175 164 156
158 161 184 172 167 168 161 174 170 162 162 165
167 159 180 179 166 168 167 188 178 165
168 166 172 157 175 170 159 172 158 160 154 182
183 167 169 162 177 174 158 175 169 161
175 175 177 171 155 178 167 180 172 172 168 154
158 157 158 183 182 182 158 167 171 163
167 177 157 177 176 153 180 163 176 180 164 184
174 164 157 178 179 183 178 177 162 177
158 162 167 165 169 159 165 164 178 168 164 171
163 188 160 169 157 176 165 176 184 189
167 159 151 162 174 158 156 161 179 170 171 184
171 166 180 162 181 167 168 186 158 169
176 166 188 165 178 174 163 180 169 170 161 183
172 156 181 168 176 176 158 186 178 157
169 167 165 180 170 172 174 159 181 177 172 164
160 158 184 182 159 165 178 162 173 176
174 161 178 182 156 159 182 162 168 169 168
166 169 168 169 177 159 173 160 160 172 157
169 170 159 173 161 164 173 186 177 176 156
176 155 165 172 157 170 165 170 168 165 161
178 157 158 164)
gnorm(-1, 2)
norm = rnorm(1000,mean = -1,sd = 2) # simulation d'un ?chantillon d'une loi normale d'esp?rance 1 et de variance 4
hist(norm,
probability=T,
add = T)    #ajouter u dessus du pr?c?dent graph
#rendu 15/03/2020
#Salah Zakaria OUAICHOUCHE
#Groupe : 3
#TP2
#les reponses en commentaires
#Partie 1 : Répartitions observée et répartition théorique
#Binomial pour l les  lois descrete on optien la probabilite pour chaue points (pas de densite de proba)
dbinom(5, 10,0.5) #->0.2460938
# 5 : vecteur de quantiles
# 10 : nombre d'essais
# 0.5 :logique; si VRAI, les probabilités p sont données sous forme de log (p)
#probabilite c'est toujour entre 0 et 1
##va nous donne une probabilite
dbinom(5, 4,0.8) #->0 pas possible (proba nul)
# probabilite c'est 0
dbinom(5, 5,1) #->1
# probabilite c'est 1
rbinom(10, 5, 0.8) #->5 3 4 3 4 5 3 4 5 5 binomial(n=5,p=0.8) qui teste la
# r essaie alleatoire (random)
# 10 c'est la taille
# 5 c'est le nombre d'essaie
# 0.8 probabilité de succès à chaque essai
# donc la on fait 5 essai aleatoire de probabilite 0.8 de succes a  chaque essqie et notre taille q'on affiche c'est 10
#2 tirage aleatoire
c("pile", "face") -> piece
sample(piece, 1)
sample(piece, 10, replace = TRUE)
#3 lois uniforme pour les lois continue on optien la densite de probabiliter
#help(dunif)
#help(runif)
dunif(5, 0,10)  #->0.1
#densite uniforme toujour entre 0 et 1
dunif(5, 0,4) #->0
#
dunif(5, 0,20) #->0.05
#
runif(10, -2,3)
#on tire aleatoirement 10 valeur entre -2 et 3
#4 simulation de la realisation de loi uniforme sur [-2,3]
x=runif(100000,-2,3)
hist(x,freq=FALSE)
y=runif(100,-2,3)
#pour les reprisenter on fait hist(x)
#on peut remarque que quent on augemente la taille de la donnee l'histogramme deuniforme
#5 simulation N=10 jets de de
x=runif(10,1,6)
hist(x,freq=FALSE)
#on augmente N
x=runif(1000000,1,6)
hist(x,freq=FALSE)
# qund on augmente N on remarque que notre histogramme devien uniforme on peut le remarque avec la barre verte que je viens d'integrer
x=runif(1000000,1,6)
hist(x,freq=FALSE)
abline(h=0.2,col="green")
#6 tracer sur le graphe
densite <- density(lancerUnif) # estimer la densit? que represente ces diff?rentes valeurs
curve(dunif(x, 1,6),
from = 1,to = 6,
ylab="densit?",
add=T,
col="red")
#7 Reprendre les questions qui precedent
y=rnorm(10000,-1,2)
hist(y,freq=FALSE)
#curve(exp((-(x+1)^2)/8)(2*sqrt(2*pi)),-10,8,add=TRUE,col="red")
# Loi binomiale
xbin = rbinom(100,100,0.3)
gbinom(100, 0.3)
hist(xbin,
probability=T,  #permet de mettre l'histogramme sous forme de proba
add=T)
# loi exponentielle
#
expo = rexp(100,50)
hist(expo,
probability=T,
breaks = 10)
curve(dexp(x,50),
ylab="densit?",
add=T,
col="red")
# loi Normale
gnorm(-1, 2)
norm = rnorm(1000,mean = -1,sd = 2) # simulation d'un ?chantillon d'une loi normale d'esp?rance 1 et de variance 4
hist(norm,
probability=T,
add = T)    #ajouter u dessus du pr?c?dent graph
#curve(dnorm(x,mean = -1,sd = 2),
#      from = -6,to = 5,
#      ylab="densit?",
#      add=T,
#      col="red")
#on peut remarquer de cette partie qu'on a pratiquement la meme alure de courbe et ca independamenet de la loi utiliser
densite <- density(lancerUnif) # estimer la densit? que represente ces diff?rentes valeurs
curve(dunif(x, 1,6),
from = 1,to = 6,
ylab="densit?",
add=T,
col="red")
x=runif(100000,-2,3)
hist(x,freq=FALSE)
y=runif(100,-2,3)
